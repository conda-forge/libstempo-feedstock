diff --git a/tests/test_fakepulsar.py b/tests/test_fakepulsar.py
new file mode 100644
index 0000000..18ca273
--- /dev/null
+++ b/tests/test_fakepulsar.py
@@ -0,0 +1,243 @@
+import shutil
+import unittest
+from pathlib import Path
+from astropy.time import Time
+
+import libstempo as t2
+import numpy as np
+
+from libstempo.toasim import fakepulsar
+
+DATA_PATH = t2.__path__[0] + "/data/"
+
+TMP_DIR = Path("test_fake_output")
+TMP_DIR.mkdir(exist_ok=True)
+
+
+class TestFakePulsar(unittest.TestCase):
+    @classmethod
+    def setUpClass(cls):
+        cls.obstimes = np.arange(53000, 54800, 10, dtype=np.float128)
+        cls.toaerr = 1e-3
+        cls.freq = 1440.0
+        cls.observatory = "ao"
+        cls.parfile = DATA_PATH + "/J1909-3744_NANOGrav_dfg+12.par"
+
+        # create a fake pulsar using fakepulsar
+        cls.fakepsr = fakepulsar(
+            parfile=cls.parfile,
+            obstimes=cls.obstimes,
+            toaerr=cls.toaerr,
+            freq=cls.freq,
+            observatory=cls.observatory,
+            iters=0,
+        )
+
+        # create a fake pulsar using tempopulsar
+        cls.fakepsrtp = t2.tempopulsar(
+            parfile=cls.parfile,
+            toas=cls.obstimes,
+            toaerrs=cls.toaerr,
+            observatory=cls.observatory,
+            obsfreq=cls.freq,
+            dofit=False,
+        )
+
+    @classmethod
+    def tearDownClass(cls):
+        shutil.rmtree(TMP_DIR)
+
+    def test_exceptions(self):
+        """
+        Test exceptions when creating a fake pulsar via tempopulsar.
+        """
+
+        # pass string rather than number for TOA
+        with self.assertRaises(TypeError):
+            t2.tempopulsar(
+                parfile=self.parfile, toas="blah", toaerrs=self.toaerr, observatory=self.observatory, obsfreq=self.freq,
+            )
+
+        # pass string rather than number for TOA error
+        with self.assertRaises(TypeError):
+            t2.tempopulsar(
+                parfile=self.parfile,
+                toas=self.obstimes,
+                toaerrs="blah",
+                observatory=self.observatory,
+                obsfreq=self.freq,
+            )
+
+        # pass integer rather than string for observatory
+        with self.assertRaises(TypeError):
+            t2.tempopulsar(
+                parfile=self.parfile, toas=self.obstimes, toaerrs=self.toaerr, observatory=0, obsfreq=self.freq,
+            )
+
+        # pass string rather than number for obsfreq
+        with self.assertRaises(TypeError):
+            t2.tempopulsar(
+                parfile=self.parfile,
+                toas=self.obstimes,
+                toaerrs=self.toaerr,
+                observatory=self.observatory,
+                obsfreq="blah",
+            )
+
+        # test exceptions if values are not given
+        kwargs = {
+            "parfile": self.parfile,
+            "toas": self.obstimes,
+            "toaerrs": self.toaerr,
+            "observatory": self.observatory,
+            "obsfreq": self.freq,
+        }
+
+        for key in ["toaerrs", "observatory", "obsfreq"]:
+            copykwargs = kwargs.copy()
+            copykwargs[key] = None
+            with self.assertRaises(ValueError):
+                t2.tempopulsar(**copykwargs)
+
+        # test exceptions for inconsistent lengths
+        for key in ["toaerrs", "observatory", "obsfreq"]:
+            copykwargs = kwargs.copy()
+            # set to two value list
+            copykwargs[key] = [kwargs[key] for _ in range(2)]
+            with self.assertRaises(ValueError):
+                t2.tempopulsar(**copykwargs)
+
+    def test_astropy_array(self):
+        """
+        Test passing TOAs as an astropy Time array.
+        """
+
+        times = Time(self.obstimes, format="mjd", scale="utc")
+
+        psr = t2.tempopulsar(
+            parfile=self.parfile, toas=times, toaerrs=self.toaerr, observatory=self.observatory, obsfreq=self.freq,
+        )
+
+        self.assertEqual(len(self.obstimes), psr.nobs)
+        self.assertTrue(np.all(self.obstimes == self.fakepsr.stoas))
+        self.assertTrue(np.all(psr.stoas == self.fakepsr.stoas))
+        self.assertEqual(psr.stoas[0].dtype, np.float128)
+
+    def test_single_values(self):
+        """
+        Test passing single value TOAs.
+        """
+
+        psr = t2.tempopulsar(
+            parfile=self.parfile,
+            toas=self.obstimes[0],
+            toaerrs=self.toaerr,
+            observatory=self.observatory,
+            obsfreq=self.freq,
+        )
+
+        self.assertEqual(psr.nobs, 1)
+        self.assertEqual(len(psr.stoas), 1)
+        self.assertTrue(np.all(self.fakepsr.stoas[0] == psr.stoas[0]))
+        self.assertEqual(psr.stoas[0].dtype, np.float128)
+
+    def test_toa_errs(self):
+        """
+        Test TOA errors are set correctly.
+        """
+
+        self.assertTrue(np.all(self.fakepsr.toaerrs == self.toaerr))
+        self.assertTrue(np.all(self.fakepsrtp.toaerrs == self.toaerr))
+
+    def test_observatory(self):
+        """
+        Test observatory values are set correctly.
+        """
+
+        self.assertTrue(np.all(self.fakepsr.telescope() == str.encode(self.observatory)))
+        self.assertTrue(np.all(self.fakepsrtp.telescope() == str.encode(self.observatory)))
+
+    def test_frequency(self):
+        """
+        Test frequency values are set correctly.
+        """
+
+        self.assertTrue(np.all(self.fakepsr.freqs == self.freq))
+        self.assertTrue(np.all(self.fakepsrtp.freqs == self.freq))
+
+    def test_sat_parts(self):
+        """
+        Test SAT day and second values are set correctly.
+        """
+
+        self.assertTrue(np.all(self.fakepsr.satDay() == self.fakepsrtp.satDay()))
+        self.assertTrue(np.all(self.fakepsr.satSec() == self.fakepsrtp.satSec()))
+
+    def test_deleted(self):
+        """
+        Test deleted values are equivalent.
+        """
+
+        self.assertTrue(np.all(self.fakepsr.deleted == self.fakepsrtp.deleted))
+        self.assertTrue(np.all(self.fakepsr.deleted == np.zeros(len(self.obstimes), dtype=np.int32)))
+
+    def test_pulsar_params(self):
+        """
+        Test pulsar parameters have been read in the same in both cases.
+        """
+
+        self.assertEqual(self.fakepsr.pars("all"), self.fakepsrtp.pars("all"))
+
+        for key in self.fakepsr.pars("all"):
+            self.assertEqual(self.fakepsr[key].val, self.fakepsrtp[key].val)
+
+    def test_fake_pulsar(self):
+        """
+        Test fakepulsar function vs passing inputs directly to tempopulsar.
+        """
+
+        self.assertEqual(self.fakepsrtp.nobs, len(self.obstimes))
+        self.assertEqual(self.fakepsrtp.nobs, self.fakepsr.nobs)
+        self.assertEqual(self.fakepsrtp.name, "1909-3744")
+        self.assertEqual(self.fakepsr.name, "1909-3744")
+
+        self.assertTrue(np.all(self.fakepsrtp.stoas == self.obstimes))
+        self.assertTrue(np.all(self.fakepsrtp.stoas == self.fakepsr.stoas))
+        self.assertTrue(np.all(self.fakepsrtp.toas() == self.fakepsr.toas()))
+
+        # check residuals are the same
+        self.assertTrue(np.all(self.fakepsrtp.residuals() == self.fakepsr.residuals()))
+        self.assertTrue(np.all(self.fakepsrtp.phaseresiduals() == self.fakepsr.phaseresiduals()))
+
+    def test_write_tim(self):
+        """
+        Test writing out the .tim file and then reading it back in.
+        """
+
+        self.fakepsr.savetim(str(TMP_DIR / "fakepsr.tim"))
+        self.fakepsrtp.savetim(str(TMP_DIR / "fakepsrtp.tim"))
+
+        self.assertTrue((TMP_DIR / "fakepsr.tim").exists())
+        self.assertTrue((TMP_DIR / "fakepsrtp.tim").exists())
+
+        t2.purgetim(str(TMP_DIR / "fakepsr.tim"))
+        t2.purgetim(str(TMP_DIR / "fakepsrtp.tim"))
+
+        newfakepsr = t2.tempopulsar(parfile=self.parfile, timfile=str(TMP_DIR / "fakepsr.tim"), dofit=False)
+        newfakepsrtp = t2.tempopulsar(parfile=self.parfile, timfile=str(TMP_DIR / "fakepsrtp.tim"), dofit=False)
+
+        self.assertEqual(newfakepsrtp.nobs, len(self.obstimes))
+        self.assertEqual(newfakepsrtp.nobs, newfakepsr.nobs)
+        self.assertEqual(newfakepsrtp.name, "1909-3744")
+        self.assertEqual(newfakepsr.name, "1909-3744")
+
+        self.assertTrue(np.all(newfakepsrtp.stoas == self.obstimes))
+        self.assertTrue(np.all(newfakepsrtp.stoas == self.fakepsrtp.stoas))
+        self.assertTrue(np.all(newfakepsrtp.toas() == self.fakepsrtp.toas()))
+        self.assertTrue(np.all(newfakepsr.stoas == self.fakepsrtp.stoas))
+        self.assertTrue(np.all(newfakepsr.toas() == newfakepsrtp.toas()))
+
+        # check residuals are the same
+        self.assertTrue(np.all(newfakepsrtp.residuals() == self.fakepsrtp.residuals()))
+        self.assertTrue(np.all(newfakepsrtp.phaseresiduals() == self.fakepsrtp.phaseresiduals()))
+        self.assertTrue(np.all(newfakepsrtp.residuals() == newfakepsr.residuals()))
diff --git a/tests/test_imports.py b/tests/test_imports.py
new file mode 100644
index 0000000..90f76ca
--- /dev/null
+++ b/tests/test_imports.py
@@ -0,0 +1,8 @@
+def test_imports():
+    import libstempo  # noqa: F401
+    import libstempo.like  # noqa: F401
+    import libstempo.emcee  # noqa: F401
+    import libstempo.plot  # noqa: F401
+    import libstempo.toasim  # noqa:F401
+    import libstempo.eccUtils  # noqa: F401
+    import libstempo.spharmORFbasis  # noqa: F401
diff --git a/tests/test_pulsar.py b/tests/test_pulsar.py
new file mode 100644
index 0000000..63697bf
--- /dev/null
+++ b/tests/test_pulsar.py
@@ -0,0 +1,79 @@
+import shutil
+import unittest
+from pathlib import Path
+
+import libstempo as t2
+import numpy as np
+
+DATA_PATH = t2.__path__[0] + "/data/"
+
+TMP_DIR = Path("test_output")
+TMP_DIR.mkdir(exist_ok=True)
+
+
+class TestDeterministicSignals(unittest.TestCase):
+    @classmethod
+    def setUpClass(cls):
+        cls.psr = t2.tempopulsar(
+            parfile=DATA_PATH + "/J1909-3744_NANOGrav_dfg+12.par", timfile=DATA_PATH + "/J1909-3744_NANOGrav_dfg+12.tim"
+        )
+
+    @classmethod
+    def tearDownClass(cls):
+        shutil.rmtree(TMP_DIR)
+
+    def test_attrs(self):
+        self.assertEqual(self.psr.nobs, 1001)
+        self.assertEqual(self.psr.name, "1909-3744")
+        self.assertEqual(len(self.psr.stoas), 1001)
+        self.assertTrue(np.all(self.psr.stoas > 50000) and np.all(self.psr.stoas < 59000))
+        self.assertTrue(np.all(self.psr.toaerrs > 0.01) and np.all(self.psr.toaerrs < 10))
+        self.assertTrue(np.all(self.psr.freqs > 700) and np.all(self.psr.freqs < 4000))
+        self.assertEqual(self.psr.stoas[0].dtype, np.float128)
+
+    def test_toas(self):
+        self.assertTrue(np.all(self.psr.toas() != self.psr.stoas))
+        self.assertTrue(np.allclose(self.psr.toas(), self.psr.stoas, atol=1))
+
+    def test_residuals(self):
+        self.assertTrue(np.all(self.psr.residuals() > -2e-5) and np.all(self.psr.residuals() < 1.5e-5))
+
+    def test_flags(self):
+        expected = {"B", "be", "bw", "chanid", "fe", "proc", "pta", "tobs"}
+        self.assertEqual(set(self.psr.flags()), expected)
+
+    def test_radec(self):
+        self.assertTrue(np.allclose(self.psr["RAJ"].val, 5.0169080674060326785))
+        self.assertTrue(np.allclose(self.psr["DECJ"].val, 7.753759525058565179e-10, atol=1))
+
+        expected = (True, True)
+        tested = (self.psr["RAJ"].set, self.psr["DECJ"].set)
+        self.assertEqual(tested, expected)
+
+    def test_fitpars(self):
+        expected = ("RAJ", "DECJ", "F0", "F1", "PMRA", "PMDEC", "PX", "SINI", "PB", "A1", "TASC", "EPS1", "EPS2", "M2")
+        fitpars = self.psr.pars()
+        self.assertEqual(fitpars[:14], expected)
+
+        setpars = self.psr.pars(which="set")
+        self.assertEqual(len(setpars), 158)
+
+        # different versions of tempo2 define different number of parameters
+        # allpars = self.psr.pars(which="all")
+        # self.assertEqual(len(allpars), 4487)
+
+    def test_fit(self):
+        _ = self.psr.fit()
+        fitvals = self.psr.vals()
+        self.assertEqual(len(fitvals), 82)
+
+    def test_designmatrix(self):
+        dmat = self.psr.designmatrix()
+        self.assertEqual(dmat.shape, (1001, 83))
+
+    def test_save_partim(self):
+        self.psr.savepar(str(TMP_DIR / "tmp.par"))
+        self.psr.savetim(str(TMP_DIR / "tmp.tim"))
+
+        self.assertTrue((TMP_DIR / "tmp.par").exists())
+        self.assertTrue((TMP_DIR / "tmp.tim").exists())
